<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
		
		
	<!--==========================================================================
	加密用KEY 此处为随机值
	============================================================================-->
	<util:properties id="securityKeys">
		<prop key="remember-me">420046A65F774C9ABBF83E73DA1C07C9</prop>
		<prop key="anonymous">6EA4FB262C444375BD303DEFF00CB418</prop>
	</util:properties>
	<!-- 使用注解拦截业务层方法 -->
	 <security:global-method-security pre-post-annotations="enabled"/>
	 <!--==========================================================================
	SpringSecurity核心过滤器组,顺序很重要
	============================================================================-->
	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map request-matcher="ant" >
			<security:filter-chain pattern="/**" filters="
	           concurrencyFilter,
	           securityContextPersistenceFilter,
	           logoutFilter,
	           validatedUsernamePasswordProcessingFilter,
	           rememberMeProcessingFilter,
	           sessionManagementFilter,
	           exceptionTranslationFilter,
	           filterSecurityInterceptor,
	           switchUserProcessingFilter"
	           />
		</security:filter-chain-map>
	</bean>
	 <!-- ================================================================== -->
	 <!--security:http use-expressions="true" entry-point-ref="http403EntryPoint">
	 	<security:intercept-url pattern="**" access="permitAll"/>
	 	<security:session-management session-fixation-protection="migrateSession">  
        	<security:concurrency-control  max-sessions="1" expired-url= "/login?expired=true"/> 
        </security:session-management>
	 	<security:custom-filter position="FORM_LOGIN_FILTER" ref="validatedUsernamePasswordProcessingFilter"/>
	    <security:custom-filter position="REMEMBER_ME_FILTER" ref="rememberMeProcessingFilter" />
	    <security:custom-filter before="CONCURRENT_SESSION_FILTER" ref= "concurrencyFilter" />           
	    <security:custom-filter position="LOGOUT_FILTER" ref="logoutFilter" />
	    <security:custom-filter before="SECURITY_CONTEXT_FILTER" ref="securityContextPersistenceFilter"/>
        <security:custom-filter before="EXCEPTION_TRANSLATION_FILTER " ref="exceptionTranslationFilter" />
        
        <security:custom-filter before="FILTER_SECURITY_INTERCEPTOR" ref= "filterSecurityInterceptor" />
        <security:custom-filter position="SWITCH_USER_FILTER" ref= "switchUserProcessingFilter" />
	 </security:http-->
	 <!-- 
hasRole([role])	 返回 true 如果当前主体拥有特定角色。 
hasAnyRole([role1,role2])	 返回 true 如果当前主体拥有任何一个提供的角色 （使用逗号分隔的字符串队列） 
principal	 允许直接访问主体对象，表示当前用户 
authentication	 允许直接访问当前 Authentication对象 从SecurityContext中获得 
permitAll	 一直返回true 
denyAll	 一直返回false 
isAnonymous()	 如果用户是一个匿名登录的用户 就会返回 true 
isRememberMe()	 如果用户是通过remember-me 登录的用户 就会返回 true 
isAuthenticated()	 如果用户不是匿名用户就会返回true 
isFullyAuthenticated()	 如果用户不是通过匿名也不是通过remember-me登录的用户时， 就会返回true。 
	  -->
 	<security:filter-security-metadata-source use-expressions="true">
 			<security:intercept-url pattern="/login"  access = "none"/>
			<security:intercept-url pattern="/css/**" access = "none" />
			<security:intercept-url pattern="/script/**" access = "none"/>
			<security:intercept-url pattern="/pages/commons/**" access = "none"/>
			<security:intercept-url pattern="/pages/inc/**" access = "none"/>
 			<!--security:intercept-url pattern="/**" access="isAuthenticated()"/>
 			<security:intercept-url pattern="/common/menuJson" access="permitAll"/>
 			用于匹配一个请求的 IP 地址或一个地址的网络掩码
 			<security:intercept-url pattern="/login"  access="hasIpAddress('162.79.8.30')"/>
 			检查用户是否通过remember me 功能认证的
 			<security:intercept-url pattern="/login"  access="rememberMe"/>
			<security:intercept-url pattern="/login"  access="permitAll"/>
			<security:intercept-url pattern="/common/front" access="permitAll" />
			<security:intercept-url pattern="/css/**" access="permitAll" />
			<security:intercept-url pattern="/script/**" access="permitAll" />
			<security:intercept-url pattern="/pages/commons/**" access="permitAll" />
			<security:intercept-url pattern="/pages/inc/**" access="permitAll" /-->
			<!-- 
			由于系统资源是指菜单资源，所以系统控制的权限是指菜单权限，不包括具体增删改查的功能权限（系统认为有某菜单的权限，则该用户就有该菜单下的所有操作权限）。
			由于菜单都是用get方式的url，所以我们用method来区分url是菜单url还是某个具体功能url.
			DELETE(删除)、POST(新增或查询)、PUT(更新)。
			 >
			<security:intercept-url pattern="/**" method="DELETE" access="permitAll"/>
			<security:intercept-url pattern="/**" method="POST" access="permitAll"/>
			<security:intercept-url pattern="/**" method="PUT" access="permitAll"/-->
	</security:filter-security-metadata-source>
	<!--==========================================================================
	核心过滤器成员之一
	常用来将某些HTTP协议的URL重定向到HTTPS协议
	============================================================================-->
	<!--bean id="channelProcessingFilter" class="org.springframework.security.web.access.channel.ChannelProcessingFilter">
		<property name="channelDecisionManager" ref="channelDecisionManager" />
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source request-matcher="ant">
				<security:intercept-url pattern="/**" access="ANY_CHANNEL" />
			</security:filter-security-metadata-source>
		</property>
	</bean>

	<bean id="channelDecisionManager"
		class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
		<property name="channelProcessors">
			<list>
				<ref local="secureChannelProcessor" />
				<ref local="insecureChannelProcessor" />
			</list>
		</property>
	</bean>
	<bean id="secureChannelProcessor" class="org.springframework.security.web.access.channel.SecureChannelProcessor" />
	<bean id="insecureChannelProcessor" class="org.springframework.security.web.access.channel.InsecureChannelProcessor" /-->
	 <!--==========================================================================
	核心过滤器成员之一
	HttpSession并发过滤器
	============================================================================-->
	<bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry" />
		<!-- 配置Session过期后重定向的地址 -->
		<property name="expiredUrl" value="/login" />
	</bean>
	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />
	<!--==========================================================================
	核心过滤器成员之一
	获取或存储一个SecurityContext,持久化SecurityContext实例
	============================================================================-->
	<bean id="securityContextRepository" class="org.springframework.security.web.context.HttpSessionSecurityContextRepository" />
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter">
		<property name="securityContextRepository" ref="securityContextRepository"></property>
	</bean>
	<bean name="sessionManagementFilter" class="org.springframework.security.web.session.SessionManagementFilter">
	<!--bean name="sessionManagementFilter" class="com.sapGarden.system.security.MySessionManagementFilter"-->
	   <constructor-arg name="securityContextRepository" ref="securityContextRepository"/>
	   <!--property name="invalidSessionUrl" value="/login?expired=true"></property-->
	   <property name="sessionAuthenticationStrategy" ref="sas"></property>
	</bean>
	<!--==========================================================================
	核心过滤器成员之一
	监控一个实现退出功能的URL
	退出动作有如下的三个步骤：
	1、使得HTTP session失效（如果invalidate-session属性被设置为true）；
	2、清除SecurityContex（真正使得用户退出）；
	3、将页面重定向至logout-success-url指明的URL。
	============================================================================-->
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<!-- 退出后重定向URL --> 
		<constructor-arg index="0" value="/login" />
		<constructor-arg index="1">
			<array>
				<ref local="logoutHandler" />
				<ref local="rememberMeServices" />
			</array>
		</constructor-arg>
		<!-- 监控的URL,退出动作url -->
		<property name="filterProcessesUrl" value="/common/logout"/>
	</bean>
	<!-- 这个Bean注入到logoutFilter中去，它实际负责最后的扫尾工作，如把HttpSession实例删除 -->
	<bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="true" />
	</bean>
	<!--==========================================================================
	核心过滤器成员之一
	监控一个URL，验证用户提交的用户名和密码.
	UsernamePasswordAuthenticationFilter的验证过程如下：
	1. 起首过滤器会调用自身的attemptAuthentication办法，从request中取出authentication， authentication是在org.springframework.security.web.context.SecurityContextPersistenceFilter过滤器中经由过程捕获用户提交的登录表单中的内容生成的一个org.springframework.security.core.Authentication接话柄例.
	2.拿到authentication对象后，过滤器会调用ProviderManager类的authenticate办法，并传入该对象.
	3.ProviderManager类的authenticate办法再调用自身的doAuthentication办法，在doAuthentication办法中会调用类中的List<AuthenticationProvider> providers凑集中的各个AuthenticationProvider接话柄现类中的authenticate（Authentication authentication）办法进行验证，由此可见，真正的验证逻辑是由各个各个AuthenticationProvider接话柄现类来完成的.
	4.AuthenticationProvider接口经由过程UserDetailsService来获取用户信息.
	UsernamePasswordAuthenticationFilter〉ProviderManager(customAuthenticationManager)〉AuthenticationProvider（DaoAuthenticationProvider）〉UserDetailsService
	============================================================================-->
	<bean id="validatedUsernamePasswordProcessingFilter" class="com.sapGarden.system.security.ValidatedUsernamePasswordAuthenticationFilter">
		<!-- 触发效验用户明密码的url -->
		<property name="filterProcessesUrl" value="/login-process"/>
		<!-- 登录请求的用户名字段，即表单中的用户名字段 -->
		<property name="usernameParameter" value="username"/>
		<!-- 登录请求中的密码字段 -->
		<property name="passwordParameter" value="password"/>
		<!-- ProviderManager -->
		<property name="authenticationManager" ref="customAuthenticationManager"/>
		<!-- '记住我'功能 -->
		<property name="rememberMeServices" ref="rememberMeServices"/>
		<!-- 验证成功 -->
		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
		<!-- 验证失败 -->
		<property name="authenticationFailureHandler" ref="authenticationFailureHandler" />
		<!-- 控制session并发 -->
		<property name="sessionAuthenticationStrategy" ref="sas" />
	</bean>
	<bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<constructor-arg index="0" ref="sessionRegistry" />
		<!--把maximumSession属性设置为-1，允许无限的会话-->
		<property name="maximumSessions" value="2"/>
		<property name="exceptionIfMaximumExceeded" value="false"/>
	</bean>
	<!-- 校验成功后的动作 -->
	<bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/common/front" />
	</bean>
	<!--  
    这个Bean注入到usernamePasswordProcessingFilter中去，他决定用户名和密码验证失败之后的动作  
    注意: 应设置行为为转发方式，否则保存在HttpServletRequest实例中的错误信息会因为重定向而丢失。  
 	-->  
	<bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
	<!--bean id="authenticationFailureHandler" class="com.sapGarden.system.security.MySimpleUrlAuthenticationFailureHandler"-->
		<property name="defaultFailureUrl" value="/login"/>
		<property name="useForward" value="true" />
	</bean>
	<!--==========================================================================
	核心过滤器成员之一
	通过分析浏览器传来的cookies查找用户名和密码用以决定是否可以登录
	Remember me功能设置了一个cookie在用户的浏览器上，它包含一个Base64编码的字符串，包含：
	用户的名字
	过期的日期/时间
	一个MD5的散列值包括过期日期/时间、用户名和密码
	应用的key值，是在<remember-me>元素的key属性中定义的
	============================================================================-->
	<bean id="rememberMeProcessingFilter" class="org.springframework.security.web.authentication.rememberme.RememberMeAuthenticationFilter">
		<property name="rememberMeServices" ref="rememberMeServices"/>
		<property name="authenticationManager" ref="customAuthenticationManager" />
	</bean>

	<bean id="rememberMeServices" class="org.springframework.security.web.authentication.rememberme.PersistentTokenBasedRememberMeServices">
		<!-- KEY 用于加密 两个一定要相同 -->  
		<property name="key" value="#{securityKeys['remember-me']}" />
		<!-- 表单上'记住我'的字段名 -->
		<property name="parameter" value="_remember_me" />
		<!-- 有效时间 -->
		<property name="tokenValiditySeconds" value="86400" />
		<property name="tokenRepository" ref="inMemoryTokenRepository" />
		<!-- 自己实现的UserDetailsService -->
		<property name="userDetailsService" ref="userDetailsService" />
	</bean>

	<bean id="rememberMeAuthenticationProvider"
		class="org.springframework.security.authentication.RememberMeAuthenticationProvider">
		<property name="key" value="#{securityKeys['remember-me']}" />
	</bean>
	<bean id="inMemoryTokenRepository" class="org.springframework.security.web.authentication.rememberme.InMemoryTokenRepositoryImpl" />
	<!--==========================================================================
	核心过滤器成员之一
	如果用户不能通过验证则给添加一个匿名用户的角色
	============================================================================-->
	<!--bean id="anonymousProcessingFilter" class="org.springframework.security.web.authentication.AnonymousAuthenticationFilter">
		<property name="userAttribute" value="anonymousUser,ROLE_ANONYMOUS"/>
		<property name="key" value="#{securityKeys['anonymous']}"/>
	</bean-->
	<!--==========================================================================
	核心过滤器成员之一
	解决因为权限和验证问题而引发的异常
	验证通不过？没有访问权限？这个Filter决定如果出现异常了到底应该这么办
	============================================================================-->
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="authenticationEntryPoint" />
		<property name="accessDeniedHandler" ref="accessDeniedHandler" />
	</bean>
	
	<!--ExceptionTranslationFilter只能捕获到后面两个过滤器所抛出的异常。  -->
	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
	<!--bean id="authenticationEntryPoint" class="com.sapGarden.system.security.MyLoginUrlAuthenticationEntryPoint"-->
		<property name="useForward" value="false" />
		<property name="loginFormUrl" value="/login" />
	</bean>

	<bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<property name="errorPage" value="/common/denied"/>
	</bean>
	<!--==========================================================================
	核心过滤器成员之一
	完成最终的授权判断(委托给AccessDecisionManager接口)
	下面的配置有点多，那是因为filterSecurityInterceptor是个懒家伙。 
	它把工作委托AuthenticationManager接口，AuthenticationManager接口也不真的干活， 
	它委托多个AuthenticationProvider接口，当然其中一个AuthenticationProvider还是要 
	把工作委托给我们的UserDetailsService实现的。最后投票决定到最终结果。
	============================================================================-->
	<bean id="mySecurityMetadataSource" class="com.sapGarden.system.security.MySecurityMetadataSource">
		<!--constructor-arg name="entityManagerFactory" ref="entityManagerFactory"/>
		<property name="entityManagerFactory" ref="entityManagerFactory" /-->
	</bean>
	<!--security:http pattern="/login" security="none"/> 
	<security:http pattern="/common/front" security="none"/--> 
	<bean id="filterSecurityInterceptor" class="org.springframework.security.web.access.intercept.FilterSecurityInterceptor">
	<!--bean id="filterSecurityInterceptor" class="com.sapGarden.system.security.MySecurityFilter"-->
		<!-- 用户权限获得,验证登录 -->
		<property name="authenticationManager" ref="customAuthenticationManager" />
		<!-- 访问决策器 -->
		<!--property name="accessDecisionManager" ref="affirmativeBased" /-->
		<property name="accessDecisionManager" ref="myAccessDecisionManager" />
		<!-- 资源和权限列表 -->
		<property name="securityMetadataSource" ref="mySecurityMetadataSource"/>
	</bean>
	<bean id="myAccessDecisionManager" class="com.sapGarden.system.security.MyAccessDecisionManager"/>
	<bean id="defaultAuthEventPublisher" class="org.springframework.security.authentication.DefaultAuthenticationEventPublisher"/>
	<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="passwordEncoder" ref="md5PasswordEncoder"/>
		<property name="userDetailsService" ref="userDetailsService" />
	</bean>
	<bean id="md5PasswordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" />
	<bean id="userDetailsService" class="com.sapGarden.system.security.CustomUserDetailsService">
		<!--property name="entityManagerFactory" ref="entityManagerFactory" /-->
	</bean>
	<bean id="customAuthenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<property name="authenticationEventPublisher" ref="defaultAuthEventPublisher"/>
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider"/>
				<ref local="rememberMeAuthenticationProvider"/>
			</list>
		</property>
	</bean>
	<!-- 这个Bean决定了投票策略，decisionVoters只要有任意一个决定通过，那么结果就是通过。-->  
	<bean class="org.springframework.security.access.vote.RoleVoter" id="roleVoter" />
	<bean class="org.springframework.security.access.vote.AuthenticatedVoter" id="authenticatedVoter" />
	<bean class="org.springframework.security.web.access.expression.WebExpressionVoter" id="expressionVoter">
		<property name="expressionHandler" ref="expressionHandler"/>
	</bean>
	<bean class="org.springframework.security.web.access.expression.DefaultWebSecurityExpressionHandler" id="expressionHandler"/>
	<bean class="org.springframework.security.access.vote.AffirmativeBased" id="affirmativeBased">
		<property name="decisionVoters">
			<list>
				<ref bean="roleVoter"/>
				<ref bean="expressionVoter"/>
				<ref bean="authenticatedVoter"/>
			</list>
		</property>
	</bean>
	<!-- ===============================切换用户============================== -->
	<bean id="switchUserProcessingFilter" class="org.springframework.security.web.authentication.switchuser.SwitchUserFilter">
	    <property name="userDetailsService" ref="userDetailsService" />
	    <!--property name="SPRING_SECURITY_SWITCH_USERNAME_KEY" value="/j_username" /-->
	    <property name="switchUserUrl" value="/j_spring_security_switch_user" />
	    <property name="exitUserUrl" value="/j_spring_security_exit_user" />
	    <property name="targetUrl" value="/common/console" />
	 </bean>
</beans>