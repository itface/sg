<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" 
	xmlns="http://java.sun.com/xml/ns/javaee" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee 
	http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">
  <display-name>sg</display-name>	
   <welcome-file-list>
    <welcome-file>/pages/index.jsp</welcome-file>
  </welcome-file-list>
	<!--error-page>
		<error-code>500</error-code>
		<location>/pages/commons/error.jsp</location>
	</error-page>
	<error-page>
		<error-code>404</error-code>
		<location>/pages/commons/404.jsp</location>
	</error-page>
	<error-page>
		<error-code>403</error-code>
		<location>/pages/commons/403.jsp</location>
	</error-page-->
	<context-param>
		<param-name>webAppRootKey</param-name>
		<param-value>sg.webApp.root</param-value>
	</context-param>
	<!-- log4j 配置  开始 -->
    <context-param>
        <param-name>log4jConfigLocation</param-name>
        <param-value>classpath:log4j.xml</param-value>
    </context-param>
    <listener>
        <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
    </listener>
   <!--rootWebApplicationContext,启动服务时加载配置 -->
    <context-param>    
		<param-name>contextConfigLocation</param-name> 
		<param-value>classpath:applicationContext.xml,classpath:spring-jpa.xml,classpath:spring-security.xml</param-value>    
		<!-- param-value>classpath:applicationContext.xml,classpath:spring-jpa.xml,classpath:spring-security.xml,classpath:spring-activemq.xml</param-value-->    
	</context-param>    
	 <!--rootWebApplicationContext配置结束-->
	 <!-- 开始配置OpenEntityManagerInViewFilter
在Java Web项目中使用Hibernate经常会遇到LazyInitializationException 。
这是因为controller和model层（java代码）将通过JPA的一些启用了延迟加载功能 的领域（如用getRefrence() 方法或者在关联关系中采用fetch=FetchType.LAZY ）返回给view层（jsp代码）的时候，
由于加载领域对象的JPA Session已经关闭，导致这些延迟加载的数据访问异常。
这时就可以使用OpenEntityManagerInViewFilter来将一个JPAsession与一次完整的请求过程对应的线程相绑定。
	  -->
	  <!-- 指定org.springframework.orm.jpa.LocalEntityManagerFactoryBean在spring配置文件中的名称,默认值为entityManagerFactory
   		如果LocalEntityManagerFactoryBean在spring中的名称不是entityManagerFactory,该参数一定要指定,否则会出现找不到entityManagerFactory的例外 -->
	 <filter>
        <filter-name>SpringOpenEntityManagerInViewFilter</filter-name>
        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>
    </filter>
    <filter-mapping>
        <filter-name>SpringOpenEntityManagerInViewFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>
    <!-- 
    结束配置OpenEntityManagerInViewFilter，用了这类Filter以后会降低一定的运行效率，但是一般的web项目都会加入一些开源的缓存管理框架，这样一来，对效率的影响就变得很小了。
     -->
     <!--ContextLoaderListener作用：在启动Web容器时，自动装配Spring applicationContext.xml的配置信息，可以指定自己的定义档，只要在<context-param>中指定"contextConfigLocation"参数 -->
     <listener>    
	  <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>    
	</listener>
	 <!-- log4j 配置  结束 -->
    <!-- spring security begin-->
    <!-- 支持SpringSecurity Session并发控制,用于httpsession管理，当一个httpsession创建或关闭之后，触发springsecurity的session管理。如果没有，关闭session后无法通知springsecurity-->
    <listener>
	    <listener-class>
	      org.springframework.security.web.session.HttpSessionEventPublisher
	    </listener-class>
    </listener> 
    <!-- 支持Spring的session, request, 自定义scope
    如果你用Spring Web MVC，即用SpringDispatcherServlet或DispatcherPortlet来处理请求，则不需要做特别的配置：DispatcherServlet 和 DispatcherPortlet已经处理了所有有关的状态.
    当使用了Spring's DispatcherServlet以外的Servlet 2.4及以上的Web容器时（如使用JSF或Struts），你需要在添加此定义
     -->
	<listener>
		<listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
	</listener>
    <filter>
		<filter-name>springSecurityFilterChain</filter-name>
		<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
	</filter>
	<filter-mapping>
		<filter-name>springSecurityFilterChain</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>
	<!-- spring security end-->
  <servlet>
      <servlet-name>springmvc</servlet-name>
      <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
      <init-param>
      			<!-- springmvc容器加载，由第一次请求时初始化 -->
	           <param-name>contextConfigLocation</param-name>
	           <param-value>classpath:springmvc-servlet.xml</param-value>
	  </init-param>
	  <!-- 优先级，标记容器是否在启动的时候就加载这个servlet(实例化并调用其init()方法) -->
      <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
      <servlet-name>springmvc</servlet-name>
      <url-pattern>/</url-pattern>
  </servlet-mapping>
	<filter>
	    <filter-name>CharacterEncodingFilter</filter-name>
	    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
	    <init-param>
	        <param-name>encoding</param-name>
	        <param-value>utf-8</param-value>
	    </init-param>
	</filter>
	<filter-mapping>
	    <filter-name>CharacterEncodingFilter</filter-name>
	    <url-pattern>/*</url-pattern>
	</filter-mapping>
	<filter>  
	    <filter-name>HiddenHttpMethodFilter</filter-name>  
	    <filter-class>org.springframework.web.filter.HiddenHttpMethodFilter</filter-class>  
	</filter>   
	<filter-mapping>  
	    <filter-name>HiddenHttpMethodFilter</filter-name>  
	    <servlet-name>springmvc</servlet-name>  
	</filter-mapping> 
	<!-- 
	<distributable/>
	-->
</web-app>
